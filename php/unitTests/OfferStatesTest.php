<?php

namespace system;

\date_default_timezone_set("America/Los_Angeles");
require_once '../autoload.php';
require_once 'Benchmark/Profiler.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-10 at 18:39:45.
 */
class OfferStatesTest extends \PHPUnit_Framework_TestCase {

    public static function tearDownAfterClass() {
        self::deleteTestBuyers();
        if( \utilities\SystemProfiler::is_set() ){
            $profiler = \utilities\SystemProfiler::create();
            $profiler->stop();
            $profiler->display('plain');
            $profiler->reset();
        }
    }

    const ONE_TWO = 0x01;
    const ONE_FIVE = 0x02;
    const TWO_THREE_PATH1 = 0x03;
    const TWO_THREE_PATH2 = 0x04;
    const TWO_FIVE = 0x05;
    const TWO_SIX = 0x06;
    const THREE_FOUR_PATH1 = 0x07;
    const THREE_FOUR_PATH2 = 0x08;
    const FOUR_FIVE = 0x09;

    public function setUp() {
        $email = \business\communication\EmailService::create();
        $email->setSuppression(true);
    }

    public function tearDown() {
        $email = \business\communication\EmailService::create();
        $email->setSuppression(false);
    }
    
    public function testAdvertisedState(){
        return;
        $offer = new \model\Offer();
        $offer->setCreationDate(new \DateTime("now") );
        $offer->testing = true;
        \business\states\offer\Advertized::setStateOnOffer($offer);
        $time = clone $offer->getAdvertisingEndDate();
        $one = new \DateInterval("P1D");
        $cycler = \business\OfferCycler::create();
        $i = 0;
        $limit = \system\Settings::read("keep_open_X_days_after_conclusion","State Transition Settings");
        $start = $offer->getState();
        for( $i=0; $i < $limit + 2; $i++ ){
            $time->add( $one );
            $cycler->cycleStateActions([$offer], $time);
            if( $offer->getState() != $start ){
                break;
            }
        }
        $this->assertEquals( 'business\states\offer\Expired', $offer->getState(), "The offer ends in Expired State.");
        $this->assertEquals( $limit, $i, "The number of iterations matches the settings file." );
    }

    /**
     * @param int $testPath
     * @dataProvider paidPaths
     */
    public function testPaidState($testPath) {
        return;
        $field = "State Transition Settings";
        $maxDuration = \system\Settings::read("advertising_length_in_days", $field);
        $responseRateTrigger = \system\Settings::read("response_rate_to_satisfy_obligation", $field);
        $offer = $this->getOfferInUnconfirmedState();
        $offer->setConfirmationTime(new \DateTime("now"));
        $offer->setPrice(0);
        $cycler = \business\OfferCycler::create();
        $cycler->cycleStateActions([$offer]);
        //this should take the offer to a state of being paid
        $this->assertEquals('business\states\offer\Paid', $offer->getState(), "The offer is set to a Paid state before tests begin");
        switch ($testPath) {
            case self::THREE_FOUR_PATH1:
                //time passes
                $fiveDays = new \DateTime("now");
                $dayCount = $maxDuration + 1;
                $fiveDays->add(new \DateInterval("P{$dayCount}D"));
                $cycler->cycleStateActions([$offer], $fiveDays);
                break;
            case self::THREE_FOUR_PATH2:
                //100% response rate
                $timer = new \Benchmark_Timer(true);
                $dataStore = \business\storage\BuyerStorage::create();
                $this->deleteTestBuyers();
                $count = count($dataStore);
                $timer->setMarker("Delete Buyers");
                for ($i = $count; $i < 200; $i++) {
                    $this->addTestBuyer($i);
                }
                $timer->setMarker("Create 200 Buyers.");
                \set_time_limit(60);
                $cycler->cycleStateActions([ $offer]);
                $timer->setMarker("Cycle Actions");
                $count = $offer->countUniqueMessageRecipients();
                $messages = $offer->getOfferMessages();
                $this->assertTrue(\is_array($messages['recipients']), "Recipients is not an array.");
                $total = count($messages['recipients']);
                $responses = 0;
                $limit = floor(($responseRateTrigger/100) * $total) - 1;
                $timer->setMarker("Start response loop.");
                $emails = array_keys( $messages['recipients'] );
                $first_batch = \array_slice($emails, 0, $limit);
                $second_batch = \array_slice($emails, $limit, 2 );
                foreach ( $first_batch as $email) {
                    $offer->recordMessageResponse($email);
                    $responses++;
                }
                $timer->setMarker("Stop response loop." );
                $cycler->cycleStateActions([$offer]);
                $timer->setMarker("Stop cycle action loop.");
                $rate = $responses / $total * 100;
                if ($rate < $responseRateTrigger) {
                    $this->assertEquals('business\states\offer\Paid', $offer->getState(), "The offer transitioned too soon. It transitioned at $rate instead of $responseRateTrigger.");
                } else if ($rate > $responseRateTrigger) {
                    $this->assertNotEquals('business\states\offer\Paid', $offer->getState(), "The offer transitioned too late. It should have transitioned at $responseRateTrigger, but did not change state by $rate.");
                    break;
                }
                foreach ($second_batch as $email) {
                    $offer->recordMessageResponse($email);
                    $responses++;
                }
                $rate = $responses / $total * 100;
                $timer->setMarker("Start second cycle action loop." );
                $cycler->cycleStateActions([$offer]);
                $timer->setMarker("Finish cycler." );
                if ($rate < $responseRateTrigger) {
                    $this->assertEquals('business\states\offer\Paid', $offer->getState(), "The offer transitioned too soon. It transitioned at $rate instead of $responseRateTrigger.");
                } else if ($rate > $responseRateTrigger) {
                    $this->assertNotEquals('business\states\offer\Paid', $offer->getState(), "The offer transitioned too late. It should have transitioned at $responseRateTrigger, but did not change state by $rate.");
                    break;
                }
                

                $timer->stop();
                $timer->display(true, 'plain');
                $this->deleteTestBuyers();
                break;
        }
        //both paths lead to the same location
        $this->assertNotEquals('business\states\offer\Paid', $offer->getState(), "The advanced from the Paid state to a new state");
        $this->assertEquals('business\states\offer\Advertized', $offer->getState(), "The offer has been moved to the Advanced State.");
    }

    public function paidPaths() {
        return [
            '5 days pass' => [self::THREE_FOUR_PATH1],
            '100% response' => [self::THREE_FOUR_PATH2]
        ];
    }

    /**
     * @dataProvider stateTwoExits
     * @param int $transitionPath
     */
    public function testConfirmedState($transitionPath) {
        return;
        $longFuture = new \DateTime("now");
        $longFuture->add(new \DateInterval("P15D"));
        $offer = $this->getOfferInUnconfirmedState();
        //transition to confirmed
        $offer->setConfirmationTime(new \DateTime("now"));
        $assignment = \business\behavior\dealTypes\ContractAssignment::applyToOffer($offer);
        $assignment->setCloseDate($longFuture);
        $emailsSent = $offer->numberOfEmailsToBuyers + $offer->numberOfEmailsToSeller + $offer->getEmailCount();
        if ($transitionPath != self::TWO_THREE_PATH1)
            $offer->setPrice(3.00);
        else
            $offer->setPrice(0);

        $cycle = \business\OfferCycler::create();
        $cycle->cycleStateActions([$offer]);
        $emailsSent_2 = $offer->numberOfEmailsToBuyers + $offer->numberOfEmailsToSeller + $offer->getEmailCount();

        switch ($transitionPath) {
            case self::TWO_THREE_PATH1:
                //no payment
                $this->assertNotEquals('business\states\offer\Unconfirmed', $offer->getState(), "The offer failed to advance from Unconfirmed.");
                $this->assertNotEquals('business\states\offer\Confirmed', $offer->getState(), "The offer failed to leave the Confirmed State.");
                $this->assertEquals('business\states\offer\Paid', $offer->getState(), "The offer failed to flow through to the paid state.");
                break;
            case self::TWO_THREE_PATH2:
                //payment required and made
                $this->assertNotEquals('business\states\offer\Unconfirmed', $offer->getState(), "The offer failed to advance from Unconfirmed.");
                $this->assertEquals('business\states\offer\Confirmed', $offer->getState(), "The offer failed to obtain the confirmed state before the tests.");
                $offer->addPayment(3.00);
                $cycle->cycleStateActions([$offer]);
                $this->assertNotEquals('business\states\offer\Confirmed', $offer->getState(), "The offer failed to leave the Confirmed State.");
                $this->assertEquals('business\states\offer\Paid', $offer->getState(), "The offer failed to flow through to the paid state.");
                break;
            case self::TWO_FIVE:
                //payment required and not made
                $this->assertNotEquals('business\states\offer\Unconfirmed', $offer->getState(), "The offer failed to advance from Unconfirmed.");
                $this->assertEquals('business\states\offer\Confirmed', $offer->getState(), "The offer failed to obtain the confirmed state before the tests.");
                $now = new \DateTime("now");
                $oneHour = new \DateInterval("PT1H");
                $end = clone $now;
                $end->add(new \DateInterval("P10D"));
                $startState = $offer->getState();
                for ($i = 0; $now < $end; $now->add($oneHour)) {
                    $cycle->cycleStateActions([$offer], $now);
                    if ($startState !== $offer->getState()) {
                        break;
                    }
                }
                $this->assertNotEquals('business\states\offer\Confirmed', $offer->getState(), "The offer failed to leave the Confirmed State.");
                $this->assertEquals('business\states\offer\Expired', $offer->getState(), "The offer failed to flow through to the Expired state.");
                break;
            case self::TWO_SIX:
                //close date hit before payment made
                $this->assertNotEquals('business\states\offer\Unconfirmed', $offer->getState(), "The offer failed to advance from Unconfirmed.");
                $this->assertEquals('business\states\offer\Confirmed', $offer->getState(), "The offer failed to obtain the confirmed state before the tests.");
                $now = new \DateTime("now");
                $oneHour = new \DateInterval("PT1H");
                $closingDate = clone $now;
                $closingDate->add(new \DateInterval("P1D"));
                $assignment = \business\behavior\dealTypes\ContractAssignment::applyToOffer($offer);
                $assignment->setCloseDate($closingDate);
                $end = clone $now;
                $end->add(new \DateInterval("P10D"));
                $startState = $offer->getState();
                for ($i = 0; $now < $end; $now->add($oneHour)) {
                    $cycle->cycleStateActions([$offer], $now);
                    if ($startState !== $offer->getState()) {
                        break;
                    }
                }
                $this->assertNotEquals('business\states\offer\Confirmed', $offer->getState(), "The offer failed to leave the Confirmed State.");
                $this->assertEquals('business\states\offer\Unknown_Future', $offer->getState(), "The offer failed to flow through to the Uknown state.");
                break;
        }
        $dataStore = \business\storage\OfferStorage::create();
        $dataStore->deleteObj($offer);
    }

    /**
     * @param int $transitionPath
     * @dataProvider stateOneExits
     */
    public function testUnverifiedState($transitionPath) {
        return;
        $offer = $this->getOfferInUnconfirmedState();
        $this->assertEquals('business\states\offer\Unconfirmed', $offer->getState());
        $cycler = \business\OfferCycler::create();
        $originalOfferDate = $offer->lastEmailTimestamp;
        $this->assertNull($originalOfferDate, "The record is not initialized with a null email date.");

        $originalNumberOfEmails = $offer->getEmailCount();
        $cycler->cycleStateActions([ $offer]);
        $newOfferDate = $offer->lastEmailTimestamp;
        $this->assertNotEquals($originalOfferDate, $newOfferDate, "The email time did not update on a new record.");

        $cycler->cycleStateActions([ $offer]);

        $unchangedDate = $offer->lastEmailTimestamp;
        $this->assertEquals($newOfferDate, $unchangedDate, "The record should not update the time stamp so quickly after the last change.");
        switch ($transitionPath) {
            case self::ONE_TWO:
                $originalConfirmationTime = $offer->confirmationTime;
                $offer->respondToEvent("secure_link_clicked");
                $newConformationTime = $offer->confirmationTime;
                $this->assertNull($originalConfirmationTime, "The record should be created with a null confirmation time.");
                $this->assertNotEquals($originalConfirmationTime, $newConformationTime, "The event sets the confirmation time.");

                $this->assertEquals('business\states\offer\Unconfirmed', $offer->getState(), "The event does not change the state.");

                $cycler->cycleStateActions([$offer]);

                $this->assertNotEquals('business\states\offer\Unconfirmed', $offer->getState(), "The event failed to advance as expected.");
                break;
            case self::ONE_FIVE:
                $now = new \DateTime("now");
                $hourlyIncrement = new \DateInterval("PT1H");
                $end = clone $now;
                $end->add(new \DateInterval("P4D"));
                $maxEmailCount = 0;
                $originalState = $offer->getState();
                for ($i = 0; $now < $end; $now->add($hourlyIncrement), $i++) {
                    $cycler->cycleStateActions([$offer], $now);
                    $maxEmailCount = \max($offer->getEmailCount(), $maxEmailCount);
                    if ($originalState != $offer->getState()) {
                        $transitionTime = $i;
                        $originalState = $offer->getState();
                        break;
                    }
                }
                $this->assertEquals('business\states\offer\Expired', $offer->getState(), "The offer fails to transition to Expired State.");
                $this->assertEquals(2, $maxEmailCount, "The max visible email count should be 2 (the state transions after the 3rd)");
                break;
        }
        $dataStore = \business\storage\OfferStorage::create();
        $dataStore->deleteObj($offer);
    }

    public function stateTwoExits() {
        return [
            'Transition No Payment Needed' => [self::TWO_THREE_PATH1],
            'Transition After Payment Received' => [self::TWO_THREE_PATH2],
            'Transition After No Payment' => [self::TWO_FIVE],
            'Transition After Close Date Passes' => [self::TWO_SIX]
        ];
    }

    public function stateOneExits() {
        return [
            'Seller Clicks Link in Confirmation Email' => [ self::ONE_TWO],
            'Seller Does not Click Link' => [self::ONE_FIVE]
        ];
    }

    protected function getRandomOffer() {
        $sqft_opts = [ 500, 650, 800, 1300, 2700];
        $beds_opts = [1, 2, 3];
        $baths_opts = [1, 2, 3];
        $text_opts = ["great oportunity", "buy now", "see the best"];
        $allFactors = [ 'sqft' => $sqft_opts, 'beds' => $beds_opts, 'baths' => $baths_opts, 'text' => $text_opts];
        $testObjects = [];

        $obj = new \model\Offer();
        $obj->id = \microtime(true) . "_" . \rand(1000, 5000);
        foreach ($allFactors as $key => $arrayOfValues) {
            $rand = \array_rand($arrayOfValues);
            switch ($key) {
                case 'sqft':
                    $obj->facts->sqft = $arrayOfValues[$rand];
                    break;
                case 'beds':
                    $obj->facts->beds = $arrayOfValues[$rand];
                    break;
                case 'baths':
                    $obj->facts->full_baths = $arrayOfValues[$rand];
                    break;
                case 'text':
                    $obj->color->property_description = $arrayOfValues[$rand];
                    break;
            }
        }
        return $obj;
    }

    protected function getOfferInUnconfirmedState() {
        $offer = $this->getRandomOffer();
        $offer->setSellerEmail("jaredclemence@gmail.com");
        \business\states\offer\Unconfirmed::setStateOnOffer($offer);
        return $offer;
    }

    protected function generateNewTestBuyer($idModifier) {
        $email = "jaredclemence($idModifier)@gmail.com";
        $buyer = new \model\user\Buyer();
        $buyer->setTestFlag(true);
        $buyer->setEmail($email);
        return $buyer;
    }

    public static function deleteTestBuyers() {
        $dataStore = \business\storage\BuyerStorage::create();
        $dataStore->query("DELETE FROM CurrentBuyersList WHERE email LIKE '%(test_%'");
    }

    private function addTestBuyer($i) {
        $dataStore = \business\storage\BuyerStorage::create();
        $newBuyer = new \model\user\Buyer();
        $newBuyer->setEmail("jaredclemence(test_$i)@gmail.com");
        $newBuyer->setTestFlag(true);
        $dataStore->store($newBuyer);
    }

}
