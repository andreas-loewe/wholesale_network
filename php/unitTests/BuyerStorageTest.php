<?php

\date_default_timezone_set("America/Los_Angeles");
require_once '../autoload.php';
require_once 'Benchmark/Iterate.php';
            

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-10 at 18:39:45.
 */
class BuyerStorageTest extends \PHPUnit_Framework_TestCase {

    /**
     * @param \model\user\Buyer $buyer
     * @dataProvider buyerProvider
     */
    public function testStorage(\model\user\Buyer $buyer) {
        $dataStore = \business\storage\BuyerStorage::create();
        //store new buyer
        $result = $dataStore->store($buyer);
        $this->assertTrue($result, "The storage reports a successful entry into the data tables.");
        //load new buyer
        $buyerCopy = $dataStore->getById($buyer->getId());
        //compare buyer with original
        $this->assertTrue($buyer->isSameAs($buyerCopy), "The copy loaded from the database matches the original object.");
        //delete buyer
        $deleteSuccessful = $dataStore->deleteObj($buyer);
        $this->assertTrue($deleteSuccessful, "The data store reports the delete as being successful.");
        //confirm that buyer does not exist
        $emptyObject = $dataStore->getById($buyer->getId());
        $this->assertNull($emptyObject, "The database returns a null object after an buyer is deleted.");
    }

    public function testCount() {
        $dataStore = \business\storage\BuyerStorage::create();
        $buyers = [];
        $this->deleteTestBuyers();
        $count = count($dataStore);
        for ($i = 0; $i < 5; $i++) {
            $buyer = new \model\user\Buyer();
            $buyer->setTestFlag(true);
            $buyer->setEmail("jaredclemence(test_$i)@gmail.com");
            $buyers[] = $buyer;
            $dataStore->store($buyer);
            $this->assertEquals($count + 1 + $i, count($dataStore), "The count increments by one.");
        }

        $count = count($dataStore);
        $iterator = new \Benchmark_Iterate(true);
        $iterator->run( 200, function(){ count( $dataStore ); } );
        $result = $iterator->get();
        $this->assertLessThan( 0.001, $result['mean'], "Average count time is less than 0.001 sec." );
        foreach ($buyers as $buyer) {
            $dataStore->deleteObj($buyer);
            $this->assertEquals($count - 1, count($dataStore), "The count decrements by one.");
            $count--;
        }
    }

    public function testForLoop() {
        $dataStore = \business\storage\BuyerStorage::create();
        $count = count($dataStore);
        $buyers = [];
        for ($i = 0; $i < 5; $i++) {
            $buyer = new \model\user\Buyer();
            $buyer->setTestFlag(true);
            $buyer->setEmail("jaredclemence(test_$i)@gmail.com");
            $buyers[] = $buyer;
            $dataStore->store($buyer);
        }

        $cycled = [];
        foreach ($dataStore as $buyer) {
            $class = get_class($buyer);
            $this->assertEquals('model\user\Buyer', $class, "Each class returned is the expected class.");
            $this->assertFalse(\in_array($buyer->getEmail(), $cycled), "The buyer is not unique.");
            $cycled[] = $buyer->getEmail();
        }

        $count = count($dataStore);
        foreach ($buyers as $buyer) {
            $dataStore->deleteObj($buyer);
            $count--;
        }
    }

    /**
     * 
     * @param int $count
     * @dataProvider countProvider
     */
    public function testGetById() {
        try {
            $count = 1000;
            \set_time_limit(60);
            $dataStore = new \business\storage\BuyerStorage();
            $i = 1;
            $this->deleteTestBuyers();
            $current = count($dataStore);
            \set_time_limit(60);
            for ($i = $current; $i < $count; $i++) {
                $this->addTestBuyer($i);
            }
            $iterator = new \Benchmark_Iterate(true);
            $iterator->run(4, function() {
                set_time_limit(3);
                $buyersList = \business\storage\BuyerStorage::create();
                foreach ($buyersList as $buyer) {
                    //do nothing
                }
            });
            $result = $iterator->get();
            $mean = $result['mean'];
            $count = count($dataStore);
            $avg = $mean / $count;
            $this->assertLessThan( 0.05, $avg, "The average time to cycle through each iteration is less than 0.03 seconds." );
            foreach ($dataStore as $buyer) {
                $email = $buyer->getEmail();
                if (\preg_match('/\(test_/', $email)) {
                    $dataStore->deleteObj($buyer);
                }
            }
            \set_time_limit(60);
        } catch (\Exception $e) {
            \var_dump($e->getMessage());
            die();
        }
    }

    public function buyerProvider() {
        $buyerA = new \model\user\Buyer();
        $buyerA->setTestFlag(true);
        $buyerA->setEmail("jared(test)@phoenixhomesltd.com");
        $buyerB = clone $buyerA;
        $buyerC = clone $buyerB;
        $buyerD = clone $buyerC;
        $buyerB->setEmail("jaredclemence(test)@gmail.com");
        $buyerC->setEmail("jaredclemence(test)@alum.drexel.edu");
        $buyerD->setEmail("info(test)@phoenixhomesltd.com");
        return [
            [ $buyerA],
            [ $buyerB],
            [ $buyerC],
            [ $buyerD]
        ];
    }

    public function testGetAllIds() {
        $dataStore = \business\storage\BuyerStorage::create();
        $data = $this->buyerProvider();
        $buyers = [];
        foreach ($data as $array) {
            $buyers[] = $array[0];
        }
        //add all buyers to system
        foreach ($buyers as $obj) {
            $dataStore->store($obj);
        }
        $allIds = $dataStore->getAllIds();
        $count = count($allIds);
        foreach ($buyers as $obj) {
            /* @var $obj \model\user\Buyer */
            $found = false;
            foreach ($allIds as $id) {
                if ($id == $obj->getId()) {
                    $found = true;
                }
            }
            $this->assertTrue($found, "$id not found in getAllIds query.");
        }
        $this->assertGreaterThanOrEqual(count($data), $count, "The number of ids returned is greater than or equal to the size of the test group.");
        foreach ($buyers as $obj) {
            $dataStore->deleteObj($obj);
        }
    }

    static public function tearDownAfterClass() {
        if (\utilities\SystemProfiler::is_set()) {
            $profiler = \utilities\SystemProfiler::create();
            $profiler->display('plain');
            $profiler->reset();
        }
    }

    private function deleteTestBuyers() {
        $dataStore = \business\storage\BuyerStorage::create();
        $dataStore->query("DELETE FROM CurrentBuyersList WHERE email LIKE '%(test_%'");
    }

    private function addTestBuyer($i) {
        $dataStore = \business\storage\BuyerStorage::create();
        $newBuyer = new \model\user\Buyer();
        $newBuyer->setEmail("jaredclemence(test_$i)@gmail.com");
        $newBuyer->setTestFlag(true);
        $i++;
        $dataStore->store($newBuyer);
    }

}
