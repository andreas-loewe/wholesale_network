<?php

\date_default_timezone_set("America/Los_Angeles");
require_once '../autoload.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-10 at 18:39:45.
 */
class OfferStorageTest extends \PHPUnit_Framework_TestCase {
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }
    
    /**
     * @dataProvider createObjects
     */
    public function testStorage( $testOffer ){
        $storage = \business\storage\OfferStorage::create();
        $didStore = $storage->store($testOffer);
        $this->assertTrue( $didStore );
        $id = $testOffer->getId();
        $loadedObj = $storage->getById($id);
        $this->assertNotNull( $loadedObj, "Offer did not load as an object." );
        $this->assertObjectMatch( $testOffer, $loadedObj );
        
        $testOffer->facts->beds += 1;
        $this->assertNotEquals( $loadedObj->facts->beds, $testOffer->facts->beds, "The number of beds has not successfully changed." );
        
        $didSave = $storage->store($testOffer);
        $this->assertTrue( $didSave );
        
        $loadedObj = $storage->getById($id);
        $this->assertObjectMatch($testOffer, $loadedObj);
        
        $didDelete = $storage->deleteObj($testOffer);
        $this->assertTrue( $didDelete, "Offer did not delete successfully." );
        
        $loadedObj2 = $storage->getById($id);
        $this->assertNull( $loadedObj2, "Offer failed to delete." );
    }


    public function createObjects(){
        $testObjects = $this->getArrayOfRandomObjects(10);
        foreach( $testObjects as &$obj ){
            $obj = [ $obj ];
        }
        return $testObjects;
    }
    
    public function testGetAllIds(){
        $randomSet = $this->getArrayOfRandomObjects(20);
        $offerData = new \business\storage\OfferStorage();
        $idsFound = [];
        foreach( $randomSet as $obj ){
            $offerData->store($obj);
            $idsFound[ $obj->getId() ] = false;
        }
        foreach( $offerData as $id => $offer ){
            if( isset( $idsFound[$id] ) ){
                $idsFound[$id] = true;
            }
        }
        foreach( $idsFound as $id=>&$result ){
            $this->assertTrue( $result, "All objects are found on iteration." );
            $result = false;
            $offerData->deleteById($id);
        }
        foreach( $offerData as $offer ){
            $id = $offer->getId();
            if( isset( $idsFound[$id] ) ){
                $idsFound[$id] = true;
            }
        }
        foreach( $idsFound as $id=>&$result ){
            $this->assertFalse( $result, "No objects are found on iteration." );
        }
    }

    protected function assertObjectMatch($obj1, $obj2) {
        $this->assertTrue( \is_object($obj1), "Object1 is not an object" );
        $this->assertTrue( \is_object($obj2), "Object2 is not an object" );
        $vars1 = \get_object_vars($obj1);
        $vars2 = \get_object_vars($obj2);
        foreach( $vars1 as $attr => $values1 ){
            if(\is_object( $values1 ) ){
                $this->assertTrue( \is_object( $vars2[$attr] ), "An object is expected in the second object, but the value in the second object is not an object: {$vars2['attr']}" );
                $val1 = $values1;
                $val2 = $vars2[$attr];
                $this->assertObjectMatch($values1, $vars2[$attr]);
            }else{
                $this->assertEquals( $values1, $vars2[$attr], "$attr does not match for original object and loaded object." );
            }
        }
    }

    protected function getArrayOfRandomObjects($count) {
        $sqft_opts = [ 500, 650, 800, 1300, 2700 ];
        $beds_opts = [1,2,3];
        $baths_opts = [1,2,3];
        $text_opts = ["great oportunity", "buy now", "see the best"];
        $allFactors = [ 'sqft'=>$sqft_opts, 'beds'=>$beds_opts, 'baths'=>$baths_opts,'text'=>$text_opts ];
        $testObjects = [];
        for( $i=0; $i < $count; $i++ ){
            $obj = new \model\Offer();
            \business\states\offer\Unconfirmed::setStateOnOffer($obj);
            $obj->setSellerEmail("jaredclemence@gmail.com");
            $obj->id = \microtime(true). "_". \rand(1000, 5000);
            foreach( $allFactors as $key=>$arrayOfValues ){
                $rand = \array_rand($arrayOfValues);
                switch( $key ){
                    case 'sqft':
                        $obj->facts->sqft = $arrayOfValues[$rand];
                        break;
                    case 'beds':
                        $obj->facts->beds = $arrayOfValues[$rand];
                        break;
                    case 'baths':
                        $obj->facts->full_baths = $arrayOfValues[$rand];
                        break;
                    case 'text':
                        $obj->color->property_description = $arrayOfValues[$rand];
                        break;
                }
            }
            $testObjects[] = $obj;
        }
        return $testObjects;
    }

}
