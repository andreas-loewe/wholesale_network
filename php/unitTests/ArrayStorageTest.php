<?php

\date_default_timezone_set("America/Los_Angeles");
require_once '../autoload.php';
            

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-10 at 18:39:45.
 */
class ArrayStorageTest extends \PHPUnit_Framework_TestCase {
    /* @var \model\Offer */
    private $offer;

    public function __construct() {
        $this->offer = new \model\Offer();
    }
    public function __destruct() {
        $this->offer = null;
    }
    
    public function testMessages(){
        $offer = $this->offer;
        /* @var $offer \model\Offer */
        $message = $offer->getOfferMessages();
        $this->assertTrue( isset( $message['recipients'] ), "Recipients key is not set." );
        $this->assertTrue( isset( $message['respondants'] ), "Respondants key is not set." );
        $this->assertTrue( \is_array($message['recipients']), "Recipients is not an array." );
        $this->assertTrue( \is_array($message['respondants']), "Respondants is not an array." );
    }
    
    public function testTimeValues(){
        $recipientEmail = "jaredclemence(test_300)@gmail.com";
        $user = new \model\user\Buyer();
        $user->setEmail($recipientEmail);
        $earlierTime = new \DateTime("now");
        $earlierTime->sub( new \DateInterval("P5D") );
        $offer = $this->offer;
        /* @var $offer \model\Offer */
        $time1 = $offer->getLastMessageTime($user);
        $offer->saveMessageInstance($user, $earlierTime);
        $time2 = $offer->getLastMessageTime($user);
        
        $this->assertNull( $time1, "The original value is null." );
        $this->assertTrue( \is_object($time2), "The time needs to be a DateTime" );
        $this->assertEquals( $earlierTime->format("r"), $time2->format("r"), "The new value is equal to the appropiate time.");
        
        $user2 = new \model\user\Buyer();
        $user2->setEmail("jaredclemence(test_200)@gmail.com");
        $time1 = $offer->getLastMessageTime($user2);
        $offer->saveMessageInstance($user2, null);
        $time2 = $offer->getLastMessageTime($user2);
        
        $this->assertNull( $time1, "The original value is null." );
        $this->assertTrue( \is_object($time2), "The time needs to be a DateTime" );
        $this->assertNotEquals( $earlierTime->format("r"), $time2->format("r"), "The second time is a DateTime and it does not match the earlier time.");
    }
}
